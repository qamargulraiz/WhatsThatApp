{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { URLaddress, loggedUser } from \"./App\";\nimport { FontAwesome } from '@expo/vector-icons';\nexport function getChats(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    chats = _ref2[0],\n    setChats = _ref2[1];\n  function fetchChats() {\n    return _fetchChats.apply(this, arguments);\n  }\n  function _fetchChats() {\n    _fetchChats = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(URLaddress + '/chat', {\n          headers: {\n            'X-Authorization': loggedUser.Stoken\n          }\n        });\n        if (response.status === 200) {\n          var data = yield response.json();\n          setChats([]);\n          setChats(data);\n        } else {\n          console.error('Failed to retrieve chats');\n        }\n      } catch (error) {\n        console.error('Get Chats error:', error);\n      }\n    });\n    return _fetchChats.apply(this, arguments);\n  }\n  fetchChats();\n  return chats;\n}\nexport function postChat(_x) {\n  return _postChat.apply(this, arguments);\n}\nfunction _postChat() {\n  _postChat = _asyncToGenerator(function* (chatName) {\n    try {\n      var response = yield fetch(URLaddress + '/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': loggedUser.Stoken\n        },\n        body: JSON.stringify({\n          \"name\": chatName\n        })\n      });\n      if (response.status === 201) {\n        console.log('Chat Successfully Created!');\n      } else {\n        console.error('Chat creation failed.');\n      }\n    } catch (error) {\n      console.error('chat creation failed:', error);\n    }\n  });\n  return _postChat.apply(this, arguments);\n}\n;\nexport function patchChat(_x2, _x3) {\n  return _patchChat.apply(this, arguments);\n}\nfunction _patchChat() {\n  _patchChat = _asyncToGenerator(function* (editChatId, chatName) {\n    try {\n      var response = yield fetch(URLaddress + '/chat/' + editChatId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': loggedUser.Stoken\n        },\n        body: JSON.stringify({\n          \"name\": chatName\n        })\n      });\n      if (response.status === 200) {\n        console.log('Chat Name Successfully Updated!');\n      } else {\n        console.error('Chat name update failed.');\n      }\n    } catch (error) {\n      console.error('chat name update failed:', error);\n    }\n  });\n  return _patchChat.apply(this, arguments);\n}\n;\nexport function getChatById(_x4, _x5) {\n  return _getChatById.apply(this, arguments);\n}\nfunction _getChatById() {\n  _getChatById = _asyncToGenerator(function* (setChat, chatId) {\n    try {\n      var response = yield fetch(URLaddress + \"/chat/\" + chatId, {\n        headers: {\n          'X-Authorization': loggedUser.Stoken\n        }\n      });\n      if (response.status === 200) {\n        var data = yield response.json();\n        setChat(data);\n        return data;\n      } else {\n        console.error('Failed to retrieve chat details');\n      }\n    } catch (error) {\n      console.error('Get ChatById error:', error);\n    }\n    return null;\n  });\n  return _getChatById.apply(this, arguments);\n}\nexport function postMessage(_x6, _x7) {\n  return _postMessage.apply(this, arguments);\n}\nfunction _postMessage() {\n  _postMessage = _asyncToGenerator(function* (chatId, chatMessage) {\n    try {\n      var response = yield fetch(URLaddress + '/chat/' + chatId + '/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': loggedUser.Stoken\n        },\n        body: JSON.stringify({\n          \"message\": chatMessage\n        })\n      });\n      if (response.status === 200) {\n        console.log('Message Successfully Sent!');\n      } else {\n        console.error('Sending Message failed.');\n      }\n    } catch (error) {\n      console.error('sending message failed:', error);\n    }\n  });\n  return _postMessage.apply(this, arguments);\n}\n;","map":{"version":3,"names":["React","useEffect","useState","useNavigation","URLaddress","loggedUser","FontAwesome","getChats","chats","setChats","fetchChats","response","fetch","headers","Stoken","status","data","json","console","error","postChat","chatName","method","body","JSON","stringify","log","patchChat","editChatId","getChatById","setChat","chatId","postMessage","chatMessage"],"sources":["C:/WhatsThat Server/WhatsThatApp/ChatRequests.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { URLaddress, loggedUser } from './App';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nexport function getChats([chats, setChats]) {\r\n  \r\n    // Use an async function inside useEffect to fetch data\r\n    async function fetchChats() {\r\n      try {\r\n        // Send a GET request with the user's authorization token\r\n        const response = await fetch(URLaddress +'/chat', {\r\n          headers: {'X-Authorization': loggedUser.Stoken},\r\n        });\r\n\r\n        // Check the response status\r\n        if (response.status === 200) {\r\n          // Store the JSON response in a constant and set state\r\n          const data = await response.json();\r\n          setChats([]);\r\n          setChats(data);\r\n        } else {\r\n          console.error('Failed to retrieve chats');\r\n        }\r\n      } catch (error) {\r\n        console.error('Get Chats error:', error);\r\n      }\r\n    }\r\n\r\n    fetchChats();\r\n  \r\n  return chats;\r\n}\r\n\r\nexport async function postChat(chatName){\r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress +'/chat', {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json', 'X-Authorization': loggedUser.Stoken},\r\n          body: JSON.stringify({ \"name\": chatName}),\r\n        });\r\n  \r\n        // Check the response status\r\n        if (response.status === 201) {\r\n          \r\n          console.log('Chat Successfully Created!');\r\n    \r\n          \r\n        } else {\r\n          console.error('Chat creation failed.');\r\n        }\r\n      } catch (error) {\r\n        console.error('chat creation failed:', error);\r\n      }\r\n};\r\n\r\nexport async function patchChat(editChatId, chatName){\r\n    try {\r\n        // Send a PATCH request with the user's signup data\r\n        const response = await fetch(URLaddress +'/chat/'+ editChatId, {\r\n          method: 'PATCH',\r\n          headers: {'Content-Type': 'application/json', 'X-Authorization': loggedUser.Stoken},\r\n          body: JSON.stringify({ \"name\": chatName}),\r\n        });\r\n  \r\n        // Check the response status\r\n        if (response.status === 200) {\r\n          \r\n          console.log('Chat Name Successfully Updated!');\r\n    \r\n          \r\n        } else {\r\n          console.error('Chat name update failed.');\r\n        }\r\n      } catch (error) {\r\n        console.error('chat name update failed:', error);\r\n      }\r\n};\r\n\r\nexport async function getChatById(setChat, chatId) {\r\n    try {\r\n      // Send a GET request with the user's authorization token\r\n      const response = await fetch(`${URLaddress}/chat/${chatId}`, {\r\n        headers: { 'X-Authorization': loggedUser.Stoken },\r\n      });\r\n  \r\n      // Check the response status\r\n      if (response.status === 200) {\r\n        // Store the JSON response in a constant and set state\r\n        const data = await response.json();\r\n        setChat(data);\r\n        return data;\r\n      } else {\r\n        console.error('Failed to retrieve chat details');\r\n      }\r\n    } catch (error) {\r\n      console.error('Get ChatById error:', error);\r\n    }\r\n    return null;\r\n  }\r\n  \r\n\r\n  export async function postMessage(chatId, chatMessage){\r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress +'/chat/'+ chatId +'/message' , {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json', 'X-Authorization': loggedUser.Stoken},\r\n          body: JSON.stringify({ \"message\": chatMessage}),\r\n        });\r\n  \r\n        // Check the response status\r\n        if (response.status === 200) {\r\n          \r\n          console.log('Message Successfully Sent!');\r\n    \r\n          \r\n        } else {\r\n          console.error('Sending Message failed.');\r\n        }\r\n      } catch (error) {\r\n        console.error('sending message failed:', error);\r\n      }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}