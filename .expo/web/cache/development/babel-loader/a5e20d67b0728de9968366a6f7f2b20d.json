{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { URLaddress, loggedUser } from \"./App\";\nimport { FontAwesome } from '@expo/vector-icons';\nexport function getChats(_x) {\n  return _getChats.apply(this, arguments);\n}\nfunction _getChats() {\n  _getChats = _asyncToGenerator(function* (setChats) {\n    try {\n      var response = yield fetch(URLaddress + '/chat', {\n        headers: {\n          'X-Authorization': loggedUser.Stoken\n        }\n      });\n      if (response.status === 200) {\n        var data = yield response.json();\n        setChats(data);\n      } else {\n        console.error('Failed to retrieve chats');\n      }\n    } catch (error) {\n      console.error('Get Chats error:', error);\n    }\n  });\n  return _getChats.apply(this, arguments);\n}\nexport function postChat(_x2) {\n  return _postChat.apply(this, arguments);\n}\nfunction _postChat() {\n  _postChat = _asyncToGenerator(function* (chatName) {\n    try {\n      var response = yield fetch(URLaddress + '/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': loggedUser.Stoken\n        },\n        body: JSON.stringify({\n          \"name\": chatName\n        })\n      });\n      if (response.status === 201) {\n        console.log('Chat Successfully Created!');\n      } else {\n        console.error('Chat creation failed.');\n      }\n    } catch (error) {\n      console.error('chat creation failed:', error);\n    }\n  });\n  return _postChat.apply(this, arguments);\n}\n;","map":{"version":3,"names":["React","useEffect","useState","useNavigation","URLaddress","loggedUser","FontAwesome","getChats","setChats","response","fetch","headers","Stoken","status","data","json","console","error","postChat","chatName","method","body","JSON","stringify","log"],"sources":["C:/WhatsThat Server/WhatsThatApp/ChatRequests.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { URLaddress, loggedUser } from './App';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nexport async function getChats(setChats) {\r\n    try {\r\n      // Send a GET request with the user's authorization token\r\n      const response = await fetch(URLaddress +'/chat', {\r\n        headers: {'X-Authorization': loggedUser.Stoken},\r\n      });\r\n  \r\n      // Check the response status\r\n      if (response.status === 200) {\r\n        // Store the JSON response in a constant and set state\r\n        const data = await response.json();\r\n        setChats(data);\r\n      } else {\r\n        console.error('Failed to retrieve chats');\r\n      }\r\n    } catch (error) {\r\n      console.error('Get Chats error:', error);\r\n    }\r\n  }\r\n\r\nexport async function postChat(chatName){\r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress +'/chat', {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json', 'X-Authorization': loggedUser.Stoken},\r\n          body: JSON.stringify({ \"name\": chatName}),\r\n        });\r\n  \r\n        // Check the response status\r\n        if (response.status === 201) {\r\n          \r\n          console.log('Chat Successfully Created!');\r\n    \r\n          \r\n        } else {\r\n          console.error('Chat creation failed.');\r\n        }\r\n      } catch (error) {\r\n        console.error('chat creation failed:', error);\r\n      }\r\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,UAAU,EAAEC,UAAU;AAC/B,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,gBAAsBC,QAAQ;EAAA;AAAA;AAkB3B;EAAA,8BAlBI,WAAwBC,QAAQ,EAAE;IACrC,IAAI;MAEF,IAAMC,QAAQ,SAASC,KAAK,CAACN,UAAU,GAAE,OAAO,EAAE;QAChDO,OAAO,EAAE;UAAC,iBAAiB,EAAEN,UAAU,CAACO;QAAM;MAChD,CAAC,CAAC;MAGF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAE3B,IAAMC,IAAI,SAASL,QAAQ,CAACM,IAAI,EAAE;QAClCP,QAAQ,CAACM,IAAI,CAAC;MAChB,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C;EACF,CAAC;EAAA;AAAA;AAEH,gBAAsBC,QAAQ;EAAA;AAAA;AAqB7B;EAAA,8BArBM,WAAwBC,QAAQ,EAAC;IACpC,IAAI;MAEA,IAAMV,QAAQ,SAASC,KAAK,CAACN,UAAU,GAAE,OAAO,EAAE;QAChDgB,MAAM,EAAE,MAAM;QACdT,OAAO,EAAE;UAAC,cAAc,EAAE,kBAAkB;UAAE,iBAAiB,EAAEN,UAAU,CAACO;QAAM,CAAC;QACnFS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE,MAAM,EAAEJ;QAAQ,CAAC;MAC1C,CAAC,CAAC;MAGF,IAAIV,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAE3BG,OAAO,CAACQ,GAAG,CAAC,4BAA4B,CAAC;MAG3C,CAAC,MAAM;QACLR,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACN,CAAC;EAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}