{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { URLaddress, loggedUser } from \"./App\";\nimport { FontAwesome } from '@expo/vector-icons';\nexport function getContacts(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    contacts = _ref2[0],\n    setContacts = _ref2[1];\n  function fetchContacts() {\n    return _fetchContacts.apply(this, arguments);\n  }\n  function _fetchContacts() {\n    _fetchContacts = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(URLaddress + '/contacts', {\n          headers: {\n            'X-Authorization': loggedUser.Stoken\n          }\n        });\n        if (response.status === 200) {\n          var data = yield response.json();\n          setContacts(data);\n        } else {\n          console.error('Failed to retrieve contacts');\n        }\n      } catch (error) {\n        console.error('Get Contact error:', error);\n      }\n    });\n    return _fetchContacts.apply(this, arguments);\n  }\n  fetchContacts();\n  return contacts;\n}\nexport function postContact(_x) {\n  return _postContact.apply(this, arguments);\n}\nfunction _postContact() {\n  _postContact = _asyncToGenerator(function* (userId) {\n    try {\n      var response = yield fetch(URLaddress + '/' + userId + '/contact', {\n        method: 'POST',\n        headers: {\n          'X-Authorization': loggedUser.Stoken\n        }\n      });\n      if (response.status === 200) {\n        console.log('Contact Successfully Saved!');\n      } else {\n        console.error('Log in failed.');\n      }\n    } catch (error) {\n      console.error('Log in failed:', error);\n    }\n  });\n  return _postContact.apply(this, arguments);\n}\n;","map":{"version":3,"names":["React","useEffect","useState","useNavigation","URLaddress","loggedUser","FontAwesome","getContacts","contacts","setContacts","fetchContacts","response","fetch","headers","Stoken","status","data","json","console","error","postContact","userId","method","log"],"sources":["C:/WhatsThat Server/WhatsThatApp/Contact.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { URLaddress, loggedUser } from './App';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nexport function getContacts([contacts, setContacts]) {\r\n  \r\n      // Use an async function inside useEffect to fetch data\r\n      async function fetchContacts() {\r\n        try {\r\n          // Send a GET request with the user's authorization token\r\n          const response = await fetch(URLaddress + '/contacts', {\r\n            headers: {'X-Authorization': loggedUser.Stoken},\r\n          });\r\n  \r\n          // Check the response status\r\n          if (response.status === 200) {\r\n            // Store the JSON response in a constant and set state\r\n            const data = await response.json();\r\n            setContacts(data);\r\n          } else {\r\n            console.error('Failed to retrieve contacts');\r\n          }\r\n        } catch (error) {\r\n          console.error('Get Contact error:', error);\r\n        }\r\n      }\r\n  \r\n      fetchContacts();\r\n    \r\n    return contacts;\r\n}\r\n\r\n\r\nexport async function postContact(userId){\r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress +'/'+ userId + '/contact', {\r\n          method: 'POST',\r\n          headers: {'X-Authorization': loggedUser.Stoken},\r\n        });\r\n  \r\n        // Check the response status\r\n        if (response.status === 200) {\r\n          \r\n          console.log('Contact Successfully Saved!');\r\n    \r\n          \r\n        } else {\r\n          console.error('Log in failed.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Log in failed:', error);\r\n      }\r\n};\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,UAAU,EAAEC,UAAU;AAC/B,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,OAAO,SAASC,WAAW,OAA0B;EAAA;IAAxBC,QAAQ;IAAEC,WAAW;EAAA,SAG7BC,aAAa;IAAA;EAAA;EAAA;IAAA,mCAA5B,aAA+B;MAC7B,IAAI;QAEF,IAAMC,QAAQ,SAASC,KAAK,CAACR,UAAU,GAAG,WAAW,EAAE;UACrDS,OAAO,EAAE;YAAC,iBAAiB,EAAER,UAAU,CAACS;UAAM;QAChD,CAAC,CAAC;QAGF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAE3B,IAAMC,IAAI,SAASL,QAAQ,CAACM,IAAI,EAAE;UAClCR,WAAW,CAACO,IAAI,CAAC;QACnB,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;QAC9C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IAAA;EAAA;EAEDT,aAAa,EAAE;EAEjB,OAAOF,QAAQ;AACnB;AAGA,gBAAsBY,WAAW;EAAA;AAAA;AAoBhC;EAAA,iCApBM,WAA2BC,MAAM,EAAC;IACrC,IAAI;MAEA,IAAMV,QAAQ,SAASC,KAAK,CAACR,UAAU,GAAE,GAAG,GAAEiB,MAAM,GAAG,UAAU,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdT,OAAO,EAAE;UAAC,iBAAiB,EAAER,UAAU,CAACS;QAAM;MAChD,CAAC,CAAC;MAGF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAE3BG,OAAO,CAACK,GAAG,CAAC,6BAA6B,CAAC;MAG5C,CAAC,MAAM;QACLL,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MACjC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC;EACN,CAAC;EAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}