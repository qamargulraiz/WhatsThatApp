{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { URLaddress, loggedUser } from \"./App\";\nimport { getContacts, postContact } from \"./Contact\";\nimport { FontAwesome } from '@expo/vector-icons';\nexport function postSignUp(_x, _x2, _x3, _x4) {\n  return _postSignUp.apply(this, arguments);\n}\nfunction _postSignUp() {\n  _postSignUp = _asyncToGenerator(function* (firstname, lastname, email, password) {\n    try {\n      var response = yield fetch(URLaddress + '/user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          first_name: firstname,\n          last_name: lastname,\n          email: email,\n          password: password\n        })\n      });\n      console.log(response.status);\n      if (response.status === 201) {\n        console.log('Sign up successful!');\n      } else {\n        console.error('Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up failed:', error);\n    }\n  });\n  return _postSignUp.apply(this, arguments);\n}\nexport function getUserInfo(_x5) {\n  return _getUserInfo.apply(this, arguments);\n}\nfunction _getUserInfo() {\n  _getUserInfo = _asyncToGenerator(function* (userId) {\n    try {\n      var response = yield fetch(URLaddress + '/user/' + userId, {\n        headers: {\n          'X-Authorization': loggedUser.Stoken\n        }\n      });\n      if (response.status === 200) {\n        var data = yield response.json();\n        return data;\n      } else {\n        console.error('Failed to retrieve user info');\n      }\n    } catch (error) {\n      console.error('Get user info error:', error);\n    }\n  });\n  return _getUserInfo.apply(this, arguments);\n}\nexport function patchUserInfo(_x6) {\n  return _patchUserInfo.apply(this, arguments);\n}\nfunction _patchUserInfo() {\n  _patchUserInfo = _asyncToGenerator(function* (updateBody) {\n    try {\n      var response = yield fetch(URLaddress + '/user/' + loggedUser.userId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': loggedUser.Stoken\n        },\n        body: JSON.stringify(updateBody)\n      });\n      console.log(response.status);\n      if (response.status === 201) {\n        console.log('Sign up successful!');\n      } else {\n        console.error('Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up failed:', error);\n    }\n  });\n  return _patchUserInfo.apply(this, arguments);\n}\nexport function postLogout() {\n  return _postLogout.apply(this, arguments);\n}\nfunction _postLogout() {\n  _postLogout = _asyncToGenerator(function* () {\n    try {\n      var response = yield fetch(URLaddress + '/logout', {\n        method: 'POST',\n        headers: {\n          'X-Authorization': loggedUser.Stoken\n        }\n      });\n      console.log(response.status);\n      if (response.status === 201) {\n        console.log('Sign up successful!');\n      } else {\n        console.error('Sign up failed.');\n      }\n    } catch (error) {\n      console.error('Sign up failed:', error);\n    }\n  });\n  return _postLogout.apply(this, arguments);\n}","map":{"version":3,"names":["React","useEffect","useState","useNavigation","URLaddress","loggedUser","getContacts","postContact","FontAwesome","postSignUp","firstname","lastname","email","password","response","fetch","method","headers","body","JSON","stringify","first_name","last_name","console","log","status","error","getUserInfo","userId","Stoken","data","json","patchUserInfo","updateBody","postLogout"],"sources":["C:/WhatsThat Server/WhatsThatApp/UserRequests.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { URLaddress, loggedUser } from './App';\r\nimport { getContacts, postContact } from './Contact';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\n\r\n\r\nexport async function postSignUp(firstname, lastname, email, password) {\r\n      \r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress + '/user', {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json',},\r\n          body: JSON.stringify({ first_name: firstname, last_name: lastname, email: email, password: password}),\r\n        });\r\n        \r\n        console.log(response.status);\r\n\r\n        // Check the response status\r\n        if (response.status === 201) {\r\n          console.log('Sign up successful!');\r\n        } else {\r\n          console.error('Sign up failed.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Sign up failed:', error);\r\n    }\r\n   \r\n}\r\n\r\nexport async function getUserInfo(userId) {\r\n  \r\n    try {\r\n        // Send a GET request with the user's authorization token\r\n        const response = await fetch(URLaddress + '/user/' + userId, {\r\n          headers: {'X-Authorization': loggedUser.Stoken},\r\n        });\r\n\r\n        // Check the response status\r\n        if (response.status === 200) {\r\n          // Store the JSON response in a constant and set state\r\n          const data = await response.json();\r\n          return data;\r\n        } else {\r\n          console.error('Failed to retrieve user info');\r\n        }\r\n    } catch (error) {\r\n        console.error('Get user info error:', error);\r\n    }\r\n    \r\n}\r\n\r\nexport async function patchUserInfo(updateBody) {\r\n      \r\n    try {\r\n        // Send a PATCH request with the user's signup data\r\n        const response = await fetch(URLaddress + '/user/' + loggedUser.userId, {\r\n          method: 'PATCH',\r\n          headers: {'Content-Type': 'application/json', 'X-Authorization': loggedUser.Stoken}, \r\n          body: JSON.stringify(updateBody),\r\n        });\r\n        \r\n        console.log(response.status);\r\n\r\n        // Check the response status\r\n        if (response.status === 201) {\r\n          console.log('Sign up successful!');\r\n        } else {\r\n          console.error('Sign up failed.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Sign up failed:', error);\r\n    }\r\n   \r\n}\r\n\r\nexport async function postLogout() {\r\n      \r\n    try {\r\n        // Send a POST request with the user's signup data\r\n        const response = await fetch(URLaddress + '/logout', {\r\n          method: 'POST',\r\n          headers: {'X-Authorization': loggedUser.Stoken,},\r\n        });\r\n        \r\n        console.log(response.status);\r\n\r\n        // Check the response status\r\n        if (response.status === 201) {\r\n          console.log('Sign up successful!');\r\n        } else {\r\n          console.error('Sign up failed.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Sign up failed:', error);\r\n    }\r\n   \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}