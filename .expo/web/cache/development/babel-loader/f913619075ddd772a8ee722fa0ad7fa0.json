{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { URLaddress, loggedUser } from \"./App\";\nimport { FontAwesome } from '@expo/vector-icons';\nexport function getContacts() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    contacts = _useState2[0],\n    setContacts = _useState2[1];\n  useEffect(function () {\n    function fetchContacts() {\n      return _fetchContacts.apply(this, arguments);\n    }\n    function _fetchContacts() {\n      _fetchContacts = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(URLaddress + '/contacts', {\n            headers: {\n              'X-Authorization': loggedUser.Stoken\n            }\n          });\n          if (response.status === 200) {\n            var data = yield response.json();\n            setContacts(data);\n          } else {\n            console.error('Failed to retrieve contacts');\n          }\n        } catch (error) {\n          console.error('Get Contact error:', error);\n        }\n      });\n      return _fetchContacts.apply(this, arguments);\n    }\n    fetchContacts();\n  }, []);\n}","map":{"version":3,"names":["React","useEffect","useState","useNavigation","URLaddress","loggedUser","FontAwesome","getContacts","contacts","setContacts","fetchContacts","response","fetch","headers","Stoken","status","data","json","console","error"],"sources":["C:/WhatsThat Server/WhatsThatApp/Contact.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { URLaddress, loggedUser } from './App';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\n\r\n\r\nexport function getContacts() {\r\n    const [contacts, setContacts] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      // Use an async function inside useEffect to fetch data\r\n      async function fetchContacts() {\r\n        try {\r\n          // Send a GET request with the user's authorization token\r\n          const response = await fetch(URLaddress + '/contacts', {\r\n            headers: {'X-Authorization': loggedUser.Stoken},\r\n          });\r\n  \r\n          // Check the response status\r\n          if (response.status === 200) {\r\n            // Store the JSON response in a constant and set state\r\n            const data = await response.json();\r\n            setContacts(data);\r\n          } else {\r\n            console.error('Failed to retrieve contacts');\r\n          }\r\n        } catch (error) {\r\n          console.error('Get Contact error:', error);\r\n        }\r\n      }\r\n  \r\n      fetchContacts();\r\n    }, []);\r\n  \r\n  }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,UAAU,EAAEC,UAAU;AAC/B,SAASC,WAAW,QAAQ,oBAAoB;AAIhD,OAAO,SAASC,WAAW,GAAG;EAC1B,gBAAgCL,QAAQ,CAAC,EAAE,CAAC;IAAA;IAArCM,QAAQ;IAAEC,WAAW;EAE5BR,SAAS,CAAC,YAAM;IAAA,SAECS,aAAa;MAAA;IAAA;IAAA;MAAA,mCAA5B,aAA+B;QAC7B,IAAI;UAEF,IAAMC,QAAQ,SAASC,KAAK,CAACR,UAAU,GAAG,WAAW,EAAE;YACrDS,OAAO,EAAE;cAAC,iBAAiB,EAAER,UAAU,CAACS;YAAM;UAChD,CAAC,CAAC;UAGF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;YAE3B,IAAMC,IAAI,SAASL,QAAQ,CAACM,IAAI,EAAE;YAClCR,WAAW,CAACO,IAAI,CAAC;UACnB,CAAC,MAAM;YACLE,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;UAC9C;QACF,CAAC,CAAC,OAAOA,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C;MACF,CAAC;MAAA;IAAA;IAEDT,aAAa,EAAE;EACjB,CAAC,EAAE,EAAE,CAAC;AAER"},"metadata":{},"sourceType":"module"}